name: Compile S3

on:
  workflow_dispatch:
    inputs:
      buildType:
        description: "Select the build type"
        required: true
        type: choice
        options:
          - "prerelease"
          - "all"
        default: "prerelease"

jobs:
  build:
    name: Build for ${{ matrix.target.name }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        target:
          - { name: "esp32s3-generic", idf_target: "esp32s3", sdkconfig_file: "configs/sdkconfig.default.esp32s3", zip_name: "esp32s3-generic.zip" }
  
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install ESP-IDF
        run: |
          sudo apt-get update
          sudo apt-get install -y wget git flex bison gperf python3-pip python3-setuptools cmake ninja-build ccache libffi-dev libssl-dev dfu-util
          git clone -b v5.3.1 --depth 1 https://github.com/espressif/esp-idf.git ~/esp-idf
          ~/esp-idf/install.sh

      - name: Apply Custom SDK Config
        run: cp "${{ matrix.target.sdkconfig_file }}" sdkconfig.defaults

      - name: Set up ESP-IDF and Target
        run: |
          . ~/esp-idf/export.sh
          export IDF_TARGET=${{ matrix.target.idf_target }}
          echo "IDF_TARGET=${{ matrix.target.idf_target }}" >> $GITHUB_ENV

      - name: Clean and Build Project
        env:
          SDKCONFIG_DEFAULTS: "sdkconfig.defaults"
        run: |
          . ~/esp-idf/export.sh
          idf.py clean
          idf.py build

      - name: Download Bootloader
        run: |
          BOOTLOADER_URL="https://cdn.spookytools.com/bootloaders/${{ matrix.target.idf_target }}.bin"
          BOOTLOADER_PATH="build/bootloader.bin"
          echo "Downloading bootloader from $BOOTLOADER_URL..."
          curl -L -o "$BOOTLOADER_PATH" "$BOOTLOADER_URL"
          if [ ! -f "$BOOTLOADER_PATH" ]; then
            echo "Error: Bootloader could not be downloaded."
            exit 1
          fi
          echo "Bootloader downloaded successfully."

      - name: Package Artifacts into ZIP
        run: |
          ARTIFACT_DIR="packaged_artifacts"
          ZIP_FILE="${{ matrix.target.zip_name }}"
          mkdir -p "$ARTIFACT_DIR"
          cp build/partition_table/partition-table.bin "$ARTIFACT_DIR/"
          cp build/*.bin "$ARTIFACT_DIR/"
          cd "$ARTIFACT_DIR"
          zip "../$ZIP_FILE" ./*
          cd ..
          ls -lh "$ZIP_FILE"

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target.zip_name }}
          path: ${{ matrix.target.zip_name }}

  upload_all:
    name: Upload Artifacts
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v4
        with:
          path: all_artifacts

      - name: Verify and Flatten Artifacts
        run: |
          mkdir -p flat_artifacts
          if [ -d "all_artifacts" ] && [ "$(ls -A all_artifacts)" ]; then
            find all_artifacts -type f -exec cp {} flat_artifacts/ \;
            ls -lh flat_artifacts
          else
            echo "No artifacts found"
            exit 1
          fi

      - name: Determine R2 Path
        run: |
          if [ "${{ github.event.inputs.buildType }}" = "prerelease" ]; then
            echo "R2_PATH=GhostESPBins/prerelease" >> $GITHUB_ENV
          else
            echo "R2_PATH=GhostESPBins" >> $GITHUB_ENV
          fi

      - name: Install rclone
        run: curl -fsSL https://rclone.org/install.sh | sudo bash

      - name: Configure rclone for Cloudflare R2
        env:
          R2_ACCESS_KEY: ${{ secrets.R2_ACCESS_KEY }}
          R2_SECRET_KEY: ${{ secrets.R2_SECRET_KEY }}
        run: |
          mkdir -p ~/.config/rclone
          cat > ~/.config/rclone/rclone.conf << EOF
          [cloudflare_r2]
          type = s3
          provider = Cloudflare
          access_key_id = $R2_ACCESS_KEY
          secret_access_key = $R2_SECRET_KEY
          endpoint = https://fb5f7d31bedfe4f3538ddfa6db491962.r2.cloudflarestorage.com
          EOF

      - name: Upload Artifacts to R2
        env:
          R2_BUCKET: "spooksapi"
        run: |
          for file in flat_artifacts/*; do
            if [ -f "$file" ]; then
              rclone copy "$file" "cloudflare_r2:${R2_BUCKET}/${R2_PATH}" --progress --s3-no-check-bucket
            fi
          done

      - id: get_release
        name: Get Latest Release ID
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          latest_release=$(gh api repos/${{ github.repository }}/releases --jq '.[0].id')
          echo "release_id=$latest_release" >> $GITHUB_OUTPUT

      - name: Upload to Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for file in flat_artifacts/*; do
            if [ -f "$file" ] && [ -s "$file" ]; then
              curl -X POST \
                -H "Authorization: token $GITHUB_TOKEN" \
                -H "Content-Type: application/zip" \
                --data-binary @"$file" \
                "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.get_release.outputs.release_id }}/assets?name=$(basename $file)"
            fi
          done

      - if: github.event.inputs.buildType == 'all'
        name: Notify Discord (ALL)
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          curl -H "Content-Type: application/json" -d '{
            "embeds": [{
              "title": "ðŸŽ‰ New Build Artifacts Uploaded!",
              "description": "All build artifacts have been successfully uploaded to Cloudflare R2 and GitHub Release.",
              "color": 5814783,
              "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
            }]
          }' "$DISCORD_WEBHOOK_URL"

      - if: github.event.inputs.buildType == 'prerelease'
        name: Get Commit History
        id: get_commits
        run: |
          commits=$(git log --pretty=format:"- %s" -n 10)
          commits="${commits//'%'/'%25'}"
          commits="${commits//$'\n'/'\\n'}"
          commits="${commits//$'\r'/'%0D'}"
          commits="${commits//'"'/'\"'}"
          echo "commits=$commits" >> $GITHUB_OUTPUT

      - if: github.event.inputs.buildType == 'prerelease'
        name: Notify Discord (PRERELEASE)
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          BUILD_DATE=$(date -u +"%Y-%m-%d")
          BUILD_VERSION=$(date -u +"%Y%m%d")
          
          curl -H "Content-Type: application/json" -d '{
            "embeds": [{
              "title": "ðŸš€ GhostESP Prerelease Build - '"$BUILD_DATE"'",
              "description": "A new prerelease build has been uploaded to Cloudflare R2 and GitHub Release.\\n\\n**Version:** Pre-'"$BUILD_VERSION"'\\n\\n**Changes since last prerelease:**\\n'"${{ steps.get_commits.outputs.commits }}"'\\n\\n**Flash your device:**\\nðŸ”— [Flash using GhostESP Web Flasher](https://flasher.ghostesp.net)",
              "color": 16750848,
              "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
              "footer": {
                "text": "GhostESP Prerelease Build '"$BUILD_VERSION"'"
              }
            }]
          }' "$DISCORD_WEBHOOK_URL"
